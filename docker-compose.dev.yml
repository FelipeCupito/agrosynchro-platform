version: '3.8'

# Environment file can be overridden:
# ENV_FILE=.env.production docker-compose -f docker-compose.dev.yml up -d

services:
  # LocalStack
  localstack:
    container_name: agrosynchro-localstack
    image: localstack/localstack:latest
    restart: unless-stopped
    ports:
      - "4566:4566"                # Main LocalStack endpoint
      - "4510-4559:4510-4559"      # Additional service ports
    environment:
      - SERVICES=apigateway,sqs,s3,ecs,rds,iam,sts,ec2
      - DEBUG=1
      - PERSISTENCE=1
      - DATA_DIR=/tmp/localstack/data
      - HOST_TMP_FOLDER=/tmp/localstack
      - DEFAULT_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    volumes:
      - "./tmp/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - agrosynchro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # IoT Mocks (for testing)
  mocks:
    build: ./mocks
    container_name: agrosynchro-mocks
    restart: unless-stopped
    ports:
      - "9002:9000"
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_DEFAULT_REGION=us-east-1
      - ENVIRONMENT=${ENVIRONMENT}
    networks:
      - agrosynchro
    depends_on:
      - localstack
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15
    container_name: agrosynchro-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: agro
      POSTGRES_PASSWORD: agro123
      POSTGRES_DB: agrodb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - agrosynchro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U agro" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (Local S3 for development)
  minio:
    image: minio/minio:latest
    container_name: agrosynchro-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    networks:
      - agrosynchro
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  minio_data:
  postgres_data:


networks:
  agrosynchro:
    driver: bridge

# Development helpers
# To start all services: docker-compose -f docker-compose.dev.yml up -d
# To start only LocalStack: docker-compose -f docker-compose.dev.yml up -d localstack
# To view logs: docker-compose -f docker-compose.dev.yml logs -f
# To stop all: docker-compose -f docker-compose.dev.yml down
# 
# For Terraform with LocalStack:
# 1. Start LocalStack: docker-compose -f docker-compose.dev.yml up -d localstack
# 2. Switch to local workspace: terraform workspace select local
# 3. Apply infrastructure: terraform apply